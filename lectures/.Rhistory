solve(matrix(1,1000,1000))
solve(matrix(1:(1000^2),1000,1000))
solve(matrix(c(1,2),1000,1000))
matrix(c(1,2),1000,1000)
library(microbenchmark)
install.packages('microbenchmark')
library(microbenchmark)
x <- runif(100)
microbenchmark(
sqrt(x),
x ^ 0.5
)
93587.20*1.11
57/(59/365)
63/(59/365)
67/(64/365)
42/7
4*40*3
1500/25
1500/17
480+88
4*3
(4*3*40)+(9*20*4)
(4*3*40)+(9*15*4)
9*4
3*4*40
1000/15
214*804
214+804
2000*.67
30*4*40
2.5/(87-50)
3/(123-87)
*Turn in Word document or PDF with your responses to these questions and figures. There is no need to turn in this code yet, we will build off of it in the next lab*
5=c(5,10)
5==c(5,10)
head(cars)
plot(cars$speed,cars$dist)
setwd("/Users/Bob/Desktop")
#####A list is needed to declare the data that goes into the model.
#####The things listed here should match the data block
modeldata<-list(N=dim(cars)[1], y=cars$dist,x=cars$speed)
modeldata
library(rstan)
#####A list is needed to declare the data that goes into the model.
#####The things listed here should match the data block
modeldata<-list(N=dim(cars)[1], y=cars$dist,x=cars$speed)
###Stan fit the model using a monte carlo algorithm. You can essentially think of this as a sophisticated guess and check.
###The end result is a vector of parameters that make up the posterior distrbution.
###This code runs the stan model. It will first compile the code and then run through all of the chains sequentially
###There are a number of parameters you can adjust, chain lengths, number of chains.
fit1<-stan(file='StanExample.stan',data=modeldata, chains=3,iter=2000, warmup=1000)
###Stan fit the model using a monte carlo algorithm. You can essentially think of this as a sophisticated guess and check.
###The end result is a vector of parameters that make up the posterior distrbution.
###This code runs the stan model. It will first compile the code and then run through all of the chains sequentially
###There are a number of parameters you can adjust, chain lengths, number of chains.
fit1<-stan(file='StanExam.stan',data=modeldata, chains=3,iter=2000, warmup=1000)
###Stan fit the model using a monte carlo algorithm. You can essentially think of this as a sophisticated guess and check.
###The end result is a vector of parameters that make up the posterior distrbution.
###This code runs the stan model. It will first compile the code and then run through all of the chains sequentially
###There are a number of parameters you can adjust, chain lengths, number of chains.
fit1<-stan(file='StanExamp.stan',data=modeldata, chains=3,iter=2000, warmup=1000)
fit1
###The extract function can used to extract the parameter value draw from the chains.
###The parameters you want to extract need to be specified.
pars<-rstan::extract(fit1, c('b0','b1','sigma'))
pars
length(pars$b0)
plot(pars$b0,type='l')
par(mfrow=c(2,2))
hist(pars$b0)
par(mfrow=c(2,2))
hist(pars$b0)
par(mfrow=c(2,2))
hist(pars$b0)
par(mfrow=c(2,2))
hist(pars$b0)
hist(pars$b1)
hist(pars$sigma)
library(rstan)
library(shinystan)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))##set working directory to current file
data = read.csv('./../data/portal_timeseries.csv')
n<-length(data$NDVI)
#remove last 10
datafit<-data[1:(n-10),] ##This is our "observed data
#####A list is needed to declare the data that goes into the model.
#####The things listed here should match the data block
modeldata<-list(N=dim(datafit)[1], y=datafit$NDVI,rain=datafit$rain)
###Stan fit the model using a monte carlo algorithm. You can essentially think of this as a sophisticated guess and check.
###The end result is a vector of parameters that make up the posterior distrbution.
###This code runs the stan model. It will first compile the code and then run through all of the chains sequentially
###There are a number of parameters you can adjust, chain lengths, number of chains.
fit1<-stan(file='StanExample_Portal.stan',data=modeldata, chains=3,iter=2000, warmup=1000)
fit1
###The extract function can used to extract the parameter value draw from the chains.
###The parameters you want to extract need to be specified.
pars<-rstan::extract(fit1, c('b0','b1','b2','sigma'))
#Notice how long the parameter is # of chains*(Total iterations-warmup)
length(pars$b0)
###Plots of the posterior
par(mfrow=c(2,2))
hist(pars$b0)
hist(pars$b1)
hist(pars$b2)
hist(pars$sigma)
data
plot(pars$b0,pars$b1)
plot(pars$b0,pars$b1)
plot(pars$b1,pars$b2)
plot(pars$b0,pars$b2)
pars
pars[,1]
pars[1,]
dim(pars)
pars$b1[1]
pars$b0[1]
pars$b2[1]
PredData<-data[(n-10):n,]
length(pars$b0)
PredOut<-matrix(NA,length(pars$b0),10)
PredOut
NDVI<-PredData$NDVI[1]
NDVI
NDVI<-NDVI+1
NDVI
pars$b0
PredData<-data[(n-10):n,]
PredOut<-matrix(NA,length(pars$b0),10)
NDVI<-PredData$NDVI[1]
for (t in 1:10){
NDVI<-pars$b0[1]+pars$b1[1]*NDVI+pars$b2[1]*PredData$rain[t]
PredOut[i,t]<-NDVI
}
PredData<-data[(n-10):n,]
PredOut<-matrix(NA,length(pars$b0),10)
NDVI<-PredData$NDVI[1]
for (t in 1:10){
NDVI<-pars$b0[1]+pars$b1[1]*NDVI+pars$b2[1]*PredData$rain[t]
PredOut[1,t]<-NDVI
}
PredOut[1,]
for (p in 1:length(pars$b0)){
NDVI<-PredData$NDVI[1]
for (t in 1:10){
NDVI<-pars$b0[p]+pars$b1[p]*NDVI+pars$b2[p]*PredData$rain[t]
PredOut[p,t]<-NDVI
}
}
PredOut
matplot(Predout,type='l')
matplot(PredOut,type='l')
matplot(t(PredOut),type='l')
plot(apply(PredOut,2,mean))
plot(apply(PredOut,2,mean), type='l')
plot(apply(PredOut,2,mean), type='l', ylim=c(.05,.4))
lines(apply(PredOut,2,quantile,probs=.975))
plot(apply(PredOut,2,mean), type='l', ylim=c(.05,.4))
lines(apply(PredOut,2,quantile,probs=.975), lty=2)
lines(apply(PredOut,2,quantile,probs=.025), lty=2)
43/(1.75/12)
1800*12
